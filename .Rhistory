{
for (j in as.numeric(colnames(m)))
{
if (m[i+1,j+1] > max_prob)
{
max_prob = m[i+1,j+1]
mode_home <- j
mode_away <- i
}
if (i + j > 2.5)
{
over_under <- over_under + m[i+1,j+1]
}
}
}
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, home_CS, away_CS, mode_home, mode_away, max_prob, over_under))
}
head(final)
for (i in as.numeric(rownames(m)))
{
for (j in as.numeric(colnames(m)))
{
if (m[i+1,j+1] > max_prob)
{
max_prob = m[i+1,j+1]
mode_home <- j
mode_away <- i
}
if (i + j > 2.5)
{
over_under <- over_under + m[i+1,j+1]
}
}
}
print(over_under)
for (i in as.numeric(rownames(m)))
{
for (j in as.numeric(colnames(m)))
{
print(m[i+1,j+1])
if (m[i+1,j+1] > max_prob)
{
max_prob = m[i+1,j+1]
mode_home <- j
mode_away <- i
}
if (i + j > 2.5)
{
over_under <- over_under + m[i+1,j+1]
}
}
}
for (i in as.numeric(rownames(m)))
{
for (j in as.numeric(colnames(m)))
{
print(m[i+1,j+1])
if (m[i+1,j+1] > max_prob)
{
max_prob = m[i+1,j+1]
mode_home <- j
mode_away <- i
}
if (i + j > 2.5)
{
over_under <- over_under + m[i+1,j+1]
}
}
}
print(m[2,3])
print(as.numeric(rownames(m)))
print(m)
print(as.numeric(rownames(m)))
print(rownames(m))
over_under <- 0
max_prob <- 0
mode_home <- 0
mode_away <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
print(m[i+1,j+1])
if (m[i+1,j+1] > max_prob)
{
max_prob = m[i+1,j+1]
mode_home <- j
mode_away <- i
}
if (i + j > 2.5)
{
over_under <- over_under + m[i+1,j+1]
}
}
}
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
print(m[i,j])
if (m[i,j] > max_prob)
{
max_prob = m[i,j]
mode_home <- j - 1
mode_away <- i - 1
}
if (i + j > 2.5)
{
over_under <- over_under + m[i,j]
}
}
}
print(over_under)
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > max_prob)
{
max_prob = m[i,j]
mode_home <- j - 1
mode_away <- i - 1
}
if (i + j - 2 > 2.5)
{
over_under <- over_under + m[i,j]
}
}
}
print(over_under)
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > max_prob)
{
max_prob = m[i,j]
mode_home <- j - 1
mode_away <- i - 1
}
if (i + j + 2 > 2.5)
{
over_under <- over_under + m[i,j]
}
}
}
print(over_under)
over_under <- 0
max_prob <- 0
mode_home <- 0
mode_away <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > max_prob)
{
max_prob = m[i,j]
mode_home <- j - 1
mode_away <- i - 1
}
if (i + j - 2 > 2.5)
{
over_under <- over_under + m[i,j]
}
}
}
print(over_under)
print(max_prob)
print(mode_home)
print(mode_away)
print(home_team)
print(away_team)
final <- data.frame()
for (i in seq(1,nrow(fixtures), 2)) {
date = fixtures[i,1]
home_team = fixtures[i,2]
away_team = fixtures[i,3]
x_home <- predict(model, fixtures[i,], type = "response")
x_away <- predict(model, fixtures[i+1,], type = "response")
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > max_prob)
{
max_prob = m[i,j]
mode_home <- j - 1
mode_away <- i - 1
}
if (i + j - 2 > 2.5)
{
over_prob <- over_prob + m[i,j]
}
}
}
under_prob <- 1 - over_prob
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, home_CS, away_CS, mode_home, mode_away, mode_prob, over_prob, under_prob))
}
head(final)
head(m)
write.csv(final, file = "AltModelResults.csv",row.names=FALSE)
final <- data.frame()
for (i in seq(1,nrow(fixtures), 2)) {
date = fixtures[i,1]
home_team = fixtures[i,2]
away_team = fixtures[i,3]
x_home <- predict(model, fixtures[i,], type = "response")
x_away <- predict(model, fixtures[i+1,], type = "response")
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > mode_prob)
{
mode_prob = m[i,j]
mode_home <- j - 1
mode_away <- i - 1
}
if (i + j - 2 > 2.5)
{
over_prob <- over_prob + m[i,j]
}
}
}
under_prob <- 1 - over_prob
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, home_CS, away_CS, mode_home, mode_away, mode_prob, over_prob, under_prob))
}
head(final)
write.csv(final, file = "AltModelResults.csv",row.names=FALSE)
final <- data.frame()
for (i in seq(1,nrow(fixtures), 2)) {
date = fixtures[i,1]
home_team = fixtures[i,2]
away_team = fixtures[i,3]
x_home <- predict(model, fixtures[i,], type = "response")
x_away <- predict(model, fixtures[i+1,], type = "response")
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > mode_prob)
{
mode_prob = m[i,j]
mode_home <- i - 1
mode_away <- j - 1
}
if (i + j - 2 > 2.5)
{
over_prob <- over_prob + m[i,j]
}
}
}
under_prob <- 1 - over_prob
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, home_CS, away_CS, mode_home, mode_away, mode_prob, over_prob, under_prob))
}
write.csv(final, file = "AltModelResults.csv",row.names=FALSE)
final <- data.frame()
for (i in seq(1,nrow(fixtures), 2)) {
date = fixtures[i,1]
home_team = fixtures[i,2]
away_team = fixtures[i,3]
x_home <- predict(model, fixtures[i,], type = "response")
x_away <- predict(model, fixtures[i+1,], type = "response")
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > mode_prob)
{
mode_prob = m[i,j]
mode_home <- i - 1
mode_away <- j - 1
}
if (i + j - 2 < 2.5)
{
under_prob <- over_prob + m[i,j]
}
}
}
over_prob <- 1 - under_prob
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, home_CS, away_CS, mode_home, mode_away, mode_prob, over_prob, under_prob))
}
write.csv(final, file = "AltModelResults.csv",row.names=FALSE)
final <- data.frame()
for (i in seq(1,nrow(fixtures), 2)) {
date = fixtures[i,1]
home_team = fixtures[i,2]
away_team = fixtures[i,3]
x_home <- predict(model, fixtures[i,], type = "response")
x_away <- predict(model, fixtures[i+1,], type = "response")
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > mode_prob)
{
mode_prob = m[i,j]
mode_home <- i - 1
mode_away <- j - 1
}
if (i + j - 2 < 2.5)
{
under_prob <- under_prob + m[i,j]
}
}
}
over_prob <- 1 - under_prob
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, home_CS, away_CS, mode_home, mode_away, mode_prob, over_prob, under_prob))
}
write.csv(final, file = "AltModelResults.csv",row.names=FALSE)
print(m)
summary(glm)
summary(model)
coeff(model)
coef(model)
coef(summary(model))[grepl("Team$",row.names(coef(summary(m)))), 4]
coef(summary(model))[grepl("Team",row.names(coef(summary(m)))), 4]
coef(summary(model))[,4]
coef(model)
strengths <- coef(model)
print(stregths)
print(strengths)
write.csv(strengths, file = "AltModelStrengths.csv",row.names=FALSE)
write.csv(strengths, file = "AltModelStrengths.csv",row.names=TRUE)
poisson_model <- function(result, date, home_team, away_team, home_GFPG, home_GAPG,
away_GFPG, away_GAPG,
league_avg_home_GFPG, league_avg_home_GAPG)
{
scaled_home_defence = home_GAPG/league_avg_home_GAPG
scaled_away_defence = away_GAPG/league_avg_home_GFPG
x_home = home_GFPG*scaled_away_defence
x_away = away_GFPG*scaled_home_defence
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > mode_prob)
{
mode_prob = m[i,j]
mode_home <- i - 1
mode_away <- j - 1
}
if (i + j - 2 < 2.5)
{
under_prob <- under_prob + m[i,j]
}
}
}
over_prob <- 1 - under_prob
result <- rbind(result, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, mode_home, mode_away, mode_prob, over_prob, under_prob, home_CS, away_CS))
return(result)
}
input <- read.csv(file="ModelInput.csv", header=TRUE, sep=",")
result <- data.frame()
for (i in 1:nrow(input)) {
date <- input[i, "Date"]
home_team <- input[i, "Home.Team"]
away_team <- input[i, "Away.Team"]
home_GFPG <- input[i, "Home.GFpG"]
home_GAPG <- input[i, "Home.GApG"]
away_GFPG <- input[i, "Away.GFpG"]
away_GAPG <- input[i, "Away.GApG"]
league_avg_home_GFPG <- input[i, "League.GFpG"]
league_avg_home_GAPG <- input[i, "League.GApG"]
result <- poisson_model(result, date, home_team, away_team, home_GFPG, home_GAPG, away_GFPG, away_GAPG,
league_avg_home_GFPG, league_avg_home_GAPG)
}
print(result)
write.csv(result, file = "Model1Results.csv",row.names=FALSE)
results <- read.csv(file="AlternateModelData.csv", header=TRUE, sep=",")
fixtures <- read.csv(file="AlternateModelFixtures.csv", header=TRUE, sep=",")
results <- read.csv(file="Model2Input.csv", header=TRUE, sep=",")
fixtures <- read.csv(file="Model2Fixtures.csv", header=TRUE, sep=",")
model <- glm(Goals ~ Team + Opponent + Home, family=poisson(link=log), data=results)
final <- data.frame()
for (i in seq(1,nrow(fixtures), 2)) {
date = fixtures[i,1]
home_team = fixtures[i,2]
away_team = fixtures[i,3]
x_home <- predict(model, fixtures[i,], type = "response")
x_away <- predict(model, fixtures[i+1,], type = "response")
home_goals <- dpois(0:10, x_home)
away_goals <- dpois(0:10, x_away)
# convert probability vectors into score matrix
m <- home_goals %o% away_goals
# get probabilities for home, draw, away win
home_prob <- sum(m[lower.tri(m)])
away_prob <- sum(m[upper.tri(m)])
draw_prob <- sum(diag(m))
home_CS <- sum(m[,1])
away_CS <- sum(m[1,])
over_prob <- 0
under_prob <- 0
mode_home <- 0
mode_away <- 0
mode_prob <- 0
for (i in 1:nrow(m))
{
for (j in 1:ncol(m))
{
if (m[i,j] > mode_prob)
{
mode_prob = m[i,j]
mode_home <- i - 1
mode_away <- j - 1
}
if (i + j - 2 < 2.5)
{
under_prob <- under_prob + m[i,j]
}
}
}
over_prob <- 1 - under_prob
final <- rbind(final, data.frame(date, home_team, away_team, home_prob, draw_prob, away_prob, mode_home, mode_away, mode_prob, over_prob, under_prob, home_CS, away_CS))
}
write.csv(final, file = "Model2Results.csv",row.names=FALSE)
strengths <- coef(model)
write.csv(strengths, file = "Model2AttackDefenceStrengths.csv",row.names=TRUE)
source('C:/Users/Gautam/Dropbox/newWorkspace/Poisson/Model1.R', echo=TRUE)
source('C:/Users/Gautam/Dropbox/newWorkspace/Poisson/Model2.R', echo=TRUE)
head(predictions)
